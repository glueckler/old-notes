Object. ...
-----------
---
-






.defineProperty()
The Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object
//syntax
Object.defineProperty(obj, property, descriptor)

//ex setting a length property to a Vector constructor function which returns the length from the origin
Object.defineProperty(Vector.prototype, "length", {
  get : function(){
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
})
console.log(new Vector(9, 4).length);
// → 5

//ex
Object.defineProperty(Object.prototype, "hiddenNonsense",
                      {enumerable: false, value: "hi"});
for (var name in map)
  console.log(name);
// → pizza
// → touched tree
console.log(map.hiddenNonsense);
// → hi


-


.keys()
//The Object.keys() method returns an array of a given object's own enumerable properties
//in the same order as a for in loop, however a for in loop will also loop enumerable properties of an objects prototype as well

//ex
var arr = ['a', 'b', 'c'];
console.log(Object.keys(arr)); // console: ['0', '1', '2']

// array like object
var obj = { 0: 'a', 1: 'b', 2: 'c' };
console.log(Object.keys(obj)); // console: ['0', '1', '2']

// array like object with random key ordering
var anObj = { 100: 'a', 2: 'b', 7: 'c' };
console.log(Object.keys(anObj)); // ['2', '7', '100']


-



.values()  --> I don't think this is in NODE
//The Object.values() method returns an array of a given object's own enumerable property values, in the same order as that provided by a for...in loop
//(the difference being that a for-in loop enumerates properties in the prototype chain as well).

//Syntax
Object.values(obj)
//Parameters
obj
//The object whose enumerable own property values are to be returned.
Return value
//An array containing the given object's own enumerable property values.

//ex
var obj = { foo: 'bar', baz: 42 };
console.log(Object.values(obj)); // ['bar', 42]

//ex
// array like object
var obj = { 0: 'a', 1: 'b', 2: 'c' };
console.log(Object.values(obj)); // ['a', 'b', 'c']

//ex
// array like object with random key ordering
var an_obj = { 100: 'a', 2: 'b', 7: 'c' };
console.log(Object.values(an_obj)); // ['b', 'c', 'a']

//ex
// getFoo is property which isn't enumerable
var my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; } } });
my_obj.foo = 'bar';
console.log(Object.values(my_obj)); // ['bar']

//ex
// non-object argument will be coerced to an object
console.log(Object.values('foo')); // ['f', 'o', 'o']


-




.hasOwnProperty()
//The hasOwnProperty() method returns a boolean indicating whether the object has the specified property as own (not inherited) property.
//Returns a boolean
//Syntax
obj.hasOwnProperty(prop)
//prop - The String name or symbol of the property to test.

//ex
o = new Object();
o.prop = 'exists';

function changeO() {
  o.newprop = o.prop;
  delete o.prop;
}

o.hasOwnProperty('prop');   // returns true
changeO();
o.hasOwnProperty('prop');   // returns false

//ex of direct vs inherited properties
o = new Object();
o.prop = 'exists';
o.hasOwnProperty('prop');             // returns true
o.hasOwnProperty('toString');         // returns false
o.hasOwnProperty('hasOwnProperty');   // returns false




-




.assign()
//The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.
//It will return the target object.

//Syntax
Object.assign(target, ...sources)
target
//The target object.
sources
//The source object(s).

//ex
var obj = { a: 1 };
var copy = Object.assign({}, obj);
console.log(copy); // { a: 1 }

//Warning for Deep Clone
//For deep cloning, we need to use other alternatives because Object.assign() copies property values.
//If the source value is a reference to an object, it only copies that reference value.




-






















