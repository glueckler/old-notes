Javascript Regular Expressions
------------------------------
----------------
------
--
-

Cheat Sheet
---
https://www.debuggex.com/cheatsheet/regex/javascript

(https?:\/\/.*\.(?:png|jpg)) for images

/\S+/g for every word


/abc/ A sequence of characters
/[abc]/ Any character from a set of characters
/[^abc]/  Any character not in a set of characters
/[0-9]/ Any character in a range of characters
/x+/  One or more occurrences of the pattern x
/x+?/ One or more occurrences, nongreedy
/x*/  Zero or more occurrences
/x?/  Zero or one occurrence
/x{2,4}/  Between two and four occurrences
/(abc)/ A group
/a|b|c/ Any one of several patterns
/./ Any character except newlines
/^/ Start of input
/$/ End of input
/\b/  Word boundary. Match any character(s) at the beginning (\bxx) and/or end (xx\b) of a word, thus \bton\b will find ton but not tons, but \bton will find tons (the ton in tons).
/\B/  Not word boundary. Match any character(s) NOT at the beginning(\Bxx) and/or end (xx\B) of a word, thus \Bton\B will find wantons but not tons, but ton\B will find both wantons and tons.
/\d/  Any digit character
/\D/  Match any character NOT in the range 0 - 9 (equivalent of POSIX [^[:digit:]])
/\w/  An alphanumeric character (“word character”)
/\W/  Match any character NOT the range 0 - 9, A - Z, a - z and punctuation (equivalent of POSIX [^[:graph:]])
/\s/  Any whitespace character
/\S/  Match any character NOT whitespace (space, tab). (equivalent of POSIX [^[:space:]]).





Create a Regular expression
---------------------------
//A regular expression is a type of object.
//It can either be constructed with the RegExp constructor or written as a literal value by enclosing the pattern in forward slash (/) characters

//ex
var re1 = new RegExp("abc");
var re2 = /abc/;

//Both of these regular expression objects represent the same pattern: an a character followed by a b followed by a c
//When using the RegExp constructor, the pattern is written as a normal string, so the usual rules apply for backslashes

//the second pattern treats backslashes differently
//put a backslash in front of any forward slash to be included in the pattern (since a froward slash simply ends the pattern)
//backslashes are not ignored (like in a string), they are preserved and change the meaning of the regexp
//characters like ?, +, etc, have special meanings in regExp and must be preceded by a \ if they are meant to represent the character itself





------------------------------------------------------------------------




testing regular expressions (.test())
-------------------------------------
//.test() will return a Boolean telling you whether the string contains a match of the pattern in the expression
//ex
console.log(/abc/.test("abcde"));
// → true
console.log(/abc/.test("abxde"));
// → false




------------------------------------------------------------------------





Matching sets of characters
---------------------------

Square brackets ( [] )
---
//putting a set of characters between square brackets makes that part of the expression match any of the characters between the brackets

//ex
/[1234567890]/ //matches a string with any digit

//Within square brackets, a dash (-) between two characters can be used to indicate a range of characters, where the ordering is determined by the character’s Unicode number

//ex
/[0-9]/ //matches unicode codes 48 to 57 (all the numbers are next to each other) therefor this will match a string with any digit inside it

//ex
console.log(/[0123456789]/.test("in 1992"));
// → true
console.log(/[0-9]/.test("in 1992"));
// → true


-

invert ( ^ )
---
//to express that you want to match any character except the ones in the set you can write a caret (^) character after the opening bracket.

//ex
var notBinary = /[^01]/;
console.log(notBinary.test("1100100010100110"));
// → false
console.log(notBinary.test("1100100010200110"));
// → true


-

shortcuts
---
//There are a number of common character groups that have their own built-in shortcuts. Digits are one of them: \d means the same thing as [0-9].

\d  Any digit character
\w  An alphanumeric character (“word character”)
\s  Any whitespace character (space, tab, newline, and similar)
\D  A character that is not a digit
\W  A nonalphanumeric character
\S  A nonwhitespace character
. Any character except for newline

//ex
var dateTime = /\d\d-\d\d-\d\d\d\d \d\d:\d\d/;
console.log(dateTime.test("30-01-2003 15:20"));
// → true
console.log(dateTime.test("30-jan-2003 15:20"));
// → false

//These backslash codes can also be used inside square brackets.
//[\d.] means any digit or a period character.
//But note that the period itself, when used between square brackets, loses its special meaning.
//The same goes for other special characters, such as +.


-

repeating parts of paterns ( + * ? {} )
--------------------------
+
//after something in a regular expression, it indicates that the element may be repeated more than once.
//Thus, /\d+/ matches one or more digit characters.
//ex
console.log(/'\d+'/.test("'123'"));
// → true
console.log(/'\d+'/.test("''"));
// → false

*
//has a similar meaning but also allows the pattern to match zero times.
//Something with a star after it never prevents a pattern from matching
//ex
console.log(/'\d*'/.test("'123'"));
// → true
console.log(/'\d*'/.test("''"));
// → true

?
//A question mark makes a part of a pattern “optional”, meaning it may occur zero or one time
//ex
var neighbor = /neighbou?r/;
console.log(neighbor.test("neighbour"));
// → true
console.log(neighbor.test("neighbor"));
// → true

{}
//indicate that a pattern should occur a precise number of times
//Putting {4} after an element, for example, requires it to occur exactly four times.
//It is also possible to specify a range this way: {2,4} means the element must occur at least twice and at most four times.
//You can also specify open-ended ranges when using curly braces by omitting the number after the comma. So {5,} means five or more times.
//ex
var dateTime = /\d{1,2}-\d{1,2}-\d{4} \d{1,2}:\d{2}/;
console.log(dateTime.test("30-1-2003 8:45"));
// → true






------------------------------------------------------------------------







Grouping Subexpressions ( () )
------------------------------
//To use an operator like * or + on more than one element at a time, you can use parentheses.
//A part of a regular expression that is enclosed in parentheses counts as a single element as far as the operators following it are concerned
//ex
var cartoonCrying = /boo+(hoo+)+/i;
console.log(cartoonCrying.test("Boohoooohoohooo"));
// → true

//The first and second + characters apply only to the second o in boo and hoo, respectively.
//The third + applies to the whole group (hoo+), matching one or more sequences like that
// /i at the end makes the regexp case insensitive allowing the "B" to match






------------------------------------------------------------------------





Matches and Groups
------------------
.exec()
---
//regexp's also have an exec method that will return an object about the match
//if there is not match is will return null
//the returned object is an array of strings with the first being the string that was matched
//the objects also has a method called index which tells us where in the string the successful match begins

//ex
var match = /\d+/.exec("one two 100");
console.log(match);
// → ["100"]
console.log(match.index);
// → 8

-

.exec() with groups
---
//When the regular expression contains subexpressions grouped with parentheses, the text that matched those groups will also show up in the array.
//The whole match is always the first element.
//The next element is the part matched by the first group
//then the second group, and so on.
//ex
var quotedText = /'([^']*)'/;
console.log(quotedText.exec("she said 'hello'"));
// → ["'hello'", "hello"]

//When a group doesn't end up matching at all (such as with a ?)
//it's spot in the array becomes undefined
//and when a group is matched multiple times, only the last match ends up in the array
//ex
console.log(/bad(ly)?/.exec("bad"));
// → ["bad", undefined]
console.log(/(\d)+/.exec("123"));
// → ["123", "3"]








------------------------------------------------------------------------






String Boundaries (^ and $ and \b)
---------------------------
^
//the caret matches the start of the string
$
//the dollar sign matches the end of a string

/^\d+$/
//will match a string container 1 or more digits from beginning to end

/^!/
//matches a string that begins with an !

/x^/
//doesn't match anything because there cannot be an x before the beginning of a string


-

word boundary ( \b )
---
A word boundary can be the start or end of the string or any point in the string that has a word character (as in \w) on one side and a nonword character on the other
//ex
console.log(/cat/.test("concatenate"));
// → true
console.log(/\bcat\b/.test("concatenate"));
// → false






------------------------------------------------------------------------





choice patterns ( | )
---------------------
//The pipe character ( | ) denotes a choice between the patern on its left and on its right
//ex to match a number followed by one of the words pig, cow, chicken
var animalCount = /\b\d+ (pig|cow|chicken)s?\b/;
console.log(animalCount.test("15 pigs"));
// → true
console.log(animalCount.test("15 pigchickens"));
// → false



------------------------------------------------------------------------





Replace Method (.replace())
---------------------------
//ex
console.log("papa".replace("p", "m"));
// → mapa

//the first argument can also be a regular expression
//in which case the first match is replaced, but not all matches
//ex
console.log("Borobudur".replace(/[ou]/, "a"));
// → Barobudur

//when a g (global) option is added behind the regexp, then all matches will be replaced
//ex
console.log("Borobudur".replace(/[ou]/g, "a"));
// → Barabadar


-

refering back to groups ($1 $2)
---
//the $1 and $2 in the replace argument refer to the strings matched by groups 1 and 2 respectively
//this goes up to $9
//the whole match can be refered to with $&

//ex
console.log(
  "Hopper, Grace\nMcCarthy, John\nRitchie, Dennis"
    .replace(/([\w ]+), ([\w ]+)/g, "$2 $1"));
// → Grace Hopper
//   John McCarthy
//   Dennis Ritchie


-

passing a function to replace argument
---
//the function will be called for the matched groups (as well as the entire match, which is bound to the first parameter) as arguments
//the return values will be inserted into the new string

//ex
var s = "the cia and fbi";
console.log(s.replace(/\b(fbi|cia)\b/g, function(str) {
  return str.toUpperCase();
}));
// → the CIA and FBI


//ex taking a string, finding all numbers followed by an alphanumeric word and returns a string where each is decremented by one
var stock = "1 lemon, 2 cabbages, and 101 eggs";
function minusOne(match, amount, unit) {
  amount = Number(amount) - 1;
  if (amount == 1) // only one left, remove the 's'
    unit = unit.slice(0, unit.length - 1);
  else if (amount == 0)
    amount = "no";
  return amount + " " + unit;
}
console.log(stock.replace(/(\d+) (\w+)/g, minusOne));
// → no lemon, 1 cabbage, and 100 eggs

//The (\d+) group gets bound to the amount parameter of the function
//the (\w+) group gets bound to the unit parameter


-

Cheat Sheet
---
$$  Inserts $
$&  Insert entire match
$`  Insert preceding string
$'  Insert following string
$Y  Insert Y'th captured group




------------------------------------------------------------------------





Greed and Backtracking
----------------------
//this regexp fails to simply remove the comments from this section of code..
function stripComments(code) {
  return code.replace(/\/\/.*|\/\*[^]*\*\//g, "");
}
console.log(stripComments("1 /* a */+/* b */ 1"));
// → 1  1

//the .* matches any number of non-newline characters
//the [^]* matches any character that is not in the empty set of characters
//in this example, the \/\* will match the /*
//and then the [^]* will match the entire rest of the string
//it will then backtrack one character at a time until it finds a match for the \*\/
//it will find one 4 character back and match /* a */+/* b */ which is not what we want

//This behavior makes the repetition operators ( + * ? {} ) greedy
//meaning the match as much as possible and then backtrack from there

//if you put a question mark after them ( +? *? ?? {}? ) they become nongreedy
//and they match as little as possible

//ex
function stripComments(code) {
  return code.replace(/\/\/.*|\/\*[^]*?\*\//g, "");
}
console.log(stripComments("1 /* a */+/* b */ 1"));
// → 1 + 1






------------------------------------------------------------------------





Dynamic RegExp
--------------
//ex putting someone's name between underscores for visibility
var name = "harry";
var text = "Harry is a suspicious character.";
var regexp = new RegExp("\\b(" + name + ")\\b", "gi");
console.log(text.replace(regexp, "_$1_"));
// → _Harry_ is a suspicious character.

//Note that in the string we pass to new RegExp the \b must be after another backslash
//Strings do not include backslashes
//the second argument for the RegExp constructor sets the options for the regexp
//global and case-insensitive

-

//ex if the name is dea+hl[]rd
var name = "dea+hl[]rd";
var text = "This dea+hl[]rd guy is super annoying.";
var escaped = name.replace(/[^\w\s]/g, "\\$&");
var regexp = new RegExp("\\b(" + escaped + ")\\b", "gi");
console.log(text.replace(regexp, "_$1_"));
// → This _dea+hl[]rd_ guy is super annoying.

//the workaround means putting \ character's before all untrusted characters
//we can't but backslashes before alphabetic chars because of things like \b
//everything non aphabetic and non whitespace gets a \ before it





------------------------------------------------------------------------





Search Method (String.search())
-------------------------------
//the indexOf method cannot be called with a regexp
//the search method expects a regexp

//the search method returns the first index of the matched string
//if there's no match it returns -1

//ex matching the first non white space char
console.log("  word".search(/\S/));
// → 2
console.log("    ".search(/\S/));
// → -1

//Note
//there's no way to indicate to start the search at a specific character offset






------------------------------------------------------------------------





reference appendix
------------------

/abc/  > 'abc'
/abc/g > means global, which causes the pattern to return all matches in the string
\      > do not take the next character literally, or take the next special character literally
^      > first character, or imediately after linebreak
$      > last char, or last before linebreak
*      > preceeding char 0 or more times Equivalent to {0,}
+      > preceeding char 1 or more times Equivalent to {1,}
?      > preceeding char 0 or 1 times Equivalent to {0,1}
        //For example, /e?le?/ matches the 'el' in "angel" and the 'le' in "angle" and also the 'l' in "oslo"
.      > any character except new line



