Javascript Date
---------------
------
-


docs - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date



new Date()
----------

new Date();
new Date(value);
new Date(dateString);
new Date(year, month[, date[, hours[, minutes[, seconds[, milliseconds]]]]]);

//ex
var date = new Date(1508359064156)
//date ==> Wed Oct 18 2017 13:37:44 GMT-0700 (PDT)

//ex
console.log(new Date(2009, 11, 9));
// → Wed Dec 09 2009 00:00:00 GMT+0100 (CET)

console.log(new Date(2009, 11, 9, 12, 59, 59, 999));
// → Wed Dec 09 2009 12:59:59 GMT+0100 (CET)


//NOTE
//Javascript uses a notation where month numbers start at 0 and day numbers start at 1
//The last four arguments (hours, minutes, seconds, and milliseconds) are optional and taken to be zero when not given


-

Date.now()
---
//Unix time
//the number of miliseconds since the beginning of 1970
//Date.now() will return the current Unix time
//so will new Date().getTime();

-

Date.parse()
---
//Strongly discouraged

-




---------------------------------------------------------------





Data.prototype. ...
-------------------

.getDate()
//Returns the day of the month (1-31) for the specified date according to local time.

.getDay()
//Returns the day of the week (0-6) for the specified date according to local time.

.getFullYear()
//Returns the year (4 digits for 4-digit years) of the specified date according to local time.

.getHours()
//Returns the hour (0-23) in the specified date according to local time.

.getMilliseconds()
//Returns the milliseconds (0-999) in the specified date according to local time.

.getMinutes()
//Returns the minutes (0-59) in the specified date according to local time.

.getMonth()
//Returns the month (0-11) in the specified date according to local time.

.getSeconds()
//Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).
//ex
(new Date()).getSeconds() //==> 36

.getTime()
//returns the time in Unix time
//ex
console.log(new Date(2013, 11, 19).getTime());
// → 1387407600000
console.log(new Date(1387407600000));
// → Thu Dec 19 2013 00:00:00 GMT+0100 (CET)


.getTimezoneOffset()
//Returns the time-zone offset in minutes for the current locale.


-


.getUTCDate()
//Returns the day (date) of the month (1-31) in the specified date according to universal time.

.getUTCDay()
//Returns the day of the week (0-6) in the specified date according to universal time.

.getUTCFullYear()
//Returns the year (4 digits for 4-digit years) in the specified date according to universal time.

.getUTCHours()
//Returns the hours (0-23) in the specified date according to universal time.

.getUTCMilliseconds()
//Returns the milliseconds (0-999) in the specified date according to universal time.

.getUTCMinutes()
//Returns the minutes (0-59) in the specified date according to universal time.

.getUTCMonth()
//Returns the month (0-11) in the specified date according to universal time.

.getUTCSeconds()
//Returns the seconds (0-59) in the specified date according to universal time.



-


Setters
---

.setDate()
Sets the day of the month for a specified date according to local time.

.setFullYear()
Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.

.setHours()
Sets the hours for a specified date according to local time.

.setMilliseconds()
Sets the milliseconds for a specified date according to local time.

.setMinutes()
Sets the minutes for a specified date according to local time.

.setMonth()
Sets the month for a specified date according to local time.

.setSeconds()
Sets the seconds for a specified date according to local time.

.setTime()
Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.

.setUTCDate()
Sets the day of the month for a specified date according to universal time.

.setUTCFullYear()
Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.

.setUTCHours()
Sets the hour for a specified date according to universal time.

.setUTCMilliseconds()
Sets the milliseconds for a specified date according to universal time.

.setUTCMinutes()
Sets the minutes for a specified date according to universal time.

.setUTCMonth()
Sets the month for a specified date according to universal time.

.setUTCSeconds()
Sets the seconds for a specified date according to universal time.



-


Conversion getter -
---

Date.prototype.toDateString()
//Returns the "date" portion of the Date as a human-readable string.
//"Tue Apr 19 2016"

Date.prototype.toISOString()
//Converts a date to a string following the ISO 8601 Extended Format.
//"2016-04-20T01:37:12.227Z"

Date.prototype.toJSON()
//Returns a string representing the Date using toISOString().
//Intended for use by JSON.stringify().

Date.prototype.toLocaleDateString()
//Returns a string with a locality sensitive representation of the date portion of this date based on system settings.

Date.prototype.toLocaleString()
//Returns a string with a locality sensitive representation of this date.
//Overrides the Object.prototype.toLocaleString() method.

Date.prototype.toLocaleTimeString()
//Returns a string with a locality sensitive representation of the time portion of this date based on system settings.

Date.prototype.toString()
//Returns a string representing the specified Date object.
//Overrides the Object.prototype.toString() method.

Date.prototype.toTimeString()
//Returns the "time" portion of the Date as a human-readable string.

Date.prototype.toUTCString()
//Converts a date to a string using the UTC timezone.

Date.prototype.valueOf()
//Returns the primitive value of a Date object.
//Overrides the Object.prototype.valueOf() method.








